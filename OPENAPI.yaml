openapi: 3.1.0
info:
  title: Ticketr API
  version: 1.0.0
  description: >-
    Core ticket endpoints for the Ticketr helpdesk. All requests must include
    tenant and brand headers to guarantee scoped access.
servers:
  - url: http://localhost
paths:
  /api/tickets:
    get:
      summary: List tickets
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Paginated ticket collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketCollection'
    post:
      summary: Create a ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketRequest'
            examples:
              create-ticket:
                value:
                  brand_id: 1
                  contact_id: 42
                  company_id: 11
                  subject: Checkout fails for VIP customer
                  description: Customer cannot complete payment.
                  priority: urgent
                  channel: web
                  category_ids: [5]
                  tag_ids: [2, 7]
      responses:
        '201':
          description: Ticket created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketResponse'
  /api/tickets/bulk-actions:
    post:
      summary: Apply bulk ticket actions
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketBulkActionRequest'
            examples:
              assign-and-status:
                value:
                  ticket_ids: [1, 2]
                  actions:
                    - type: assign
                      assignee_id: 7
                    - type: status
                      status: pending
      responses:
        '202':
          description: Bulk action accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketBulkActionResponse'
  /api/tickets/{ticket}:
    get:
      summary: Retrieve a ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Ticket details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
    put:
      summary: Update a ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketRequest'
      responses:
        '200':
          description: Ticket updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
    delete:
      summary: Archive/delete a ticket
      tags: [Tickets]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      responses:
        '202':
          description: Ticket archived (soft deleted)
  /api/tickets/{ticket}/messages:
    get:
      summary: List ticket messages
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      responses:
        '200':
          description: Paginated ticket message collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMessageCollection'
    post:
      summary: Append a ticket message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketMessageRequest'
            examples:
              append-message:
                value:
                  body: "Agent reply captured from email"
                  visibility: internal
                  channel: email
                  author_type: user
                  author_id: 17
                  external_id: "gmail-abc123"
                  participants:
                    - participant_type: user
                      participant_id: 17
                      role: agent
                      visibility: internal
                  attachments:
                    - disk: local
                      path: attachments/reply.pdf
                      filename: reply.pdf
                      mime_type: application/pdf
                      size: 2048
                  email:
                    subject: "Re: Customer Support Request"
                    mailbox_id: 5
                    to: ["customer@example.test"]
                    text_body: "Thanks for reaching out, we are on it."
      responses:
        '201':
          description: Ticket message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMessageResponse'
  /api/tickets/{ticket}/ingest:
    post:
      summary: Ingest a channel message
      tags: [Ticket Messages]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketId'
        - $ref: '#/components/parameters/ChannelTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketMessageRequest'
            examples:
              ingest-message:
                value:
                  body: "Inbound email reply"
                  channel: email
                  visibility: internal
                  author_type: user
                  author_id: 42
                  external_id: "imap-123"
                  attachments:
                    - disk: local
                      path: attachments/inbound.eml
                      filename: inbound.eml
                      mime_type: message/rfc822
                      size: 8192
      responses:
        '201':
          description: Ticket message ingested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMessageResponse'
        '401':
          description: Invalid or missing channel token
  /api/channel-adapters:
    get:
      summary: List channel adapters
      tags: [Channel Adapters]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Paginated channel adapter list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelAdapterCollection'
    post:
      summary: Create a channel adapter
      tags: [Channel Adapters]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelAdapterRequest'
            examples:
              create-adapter:
                value:
                  name: Default Email Gateway
                  slug: email-gateway
                  channel: email
                  provider: smtp
                  configuration:
                    host: smtp.example.test
                    port: 587
      responses:
        '201':
          description: Channel adapter created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelAdapterResponse'
  /api/channel-adapters/{channel_adapter}:
    get:
      summary: Show a channel adapter
      tags: [Channel Adapters]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/ChannelAdapterId'
      responses:
        '200':
          description: Channel adapter details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelAdapterResponse'
    put:
      summary: Update a channel adapter
      tags: [Channel Adapters]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/ChannelAdapterId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelAdapterRequest'
      responses:
        '200':
          description: Channel adapter updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelAdapterResponse'
    delete:
      summary: Delete a channel adapter
      tags: [Channel Adapters]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/ChannelAdapterId'
      responses:
        '204':
          description: Channel adapter deleted
  /api/ticket-macros:
    get:
      summary: List ticket macros
      tags: [Ticket Macros]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Paginated macro list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMacroCollection'
    post:
      summary: Create a ticket macro
      tags: [Ticket Macros]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketMacroRequest'
            examples:
              create-macro:
                value:
                  name: Escalate to Tier 2
                  slug: escalate-tier-2
                  body: Escalating ticket to Tier 2.
                  visibility: brand
      responses:
        '201':
          description: Ticket macro created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMacroResponse'
  /api/ticket-macros/{ticket_macro}:
    get:
      summary: Show a ticket macro
      tags: [Ticket Macros]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketMacroId'
      responses:
        '200':
          description: Ticket macro details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMacroResponse'
    put:
      summary: Update a ticket macro
      tags: [Ticket Macros]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketMacroId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketMacroRequest'
      responses:
        '200':
          description: Ticket macro updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketMacroResponse'
    delete:
      summary: Delete a ticket macro
      tags: [Ticket Macros]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/TicketMacroId'
      responses:
        '204':
          description: Ticket macro deleted
  /api/email/mailboxes:
    get:
      summary: List email mailboxes
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Paginated mailbox list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMailboxCollection'
    post:
      summary: Create email mailbox
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailMailboxRequest'
            examples:
              create-mailbox:
                value:
                  name: Support Mailbox
                  slug: support-mailbox
                  direction: bidirectional
                  protocol: imap
                  host: imap.example.test
                  port: 993
                  encryption: ssl
                  username: support@example.test
                  credentials:
                    password: secret
                  settings:
                    folder: INBOX
                    mailer: smtp
      responses:
        '201':
          description: Mailbox created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMailboxResponse'
  /api/email/mailboxes/{mailbox}:
    get:
      summary: View email mailbox
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/EmailMailboxId'
      responses:
        '200':
          description: Email mailbox detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMailboxResponse'
    put:
      summary: Update email mailbox
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/EmailMailboxId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailMailboxRequest'
      responses:
        '200':
          description: Email mailbox updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMailboxResponse'
    delete:
      summary: Delete email mailbox
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/EmailMailboxId'
      responses:
        '200':
          description: Email mailbox deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/email/mailboxes/{mailbox}/sync:
    post:
      summary: Synchronize mailbox
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/EmailMailboxId'
      responses:
        '200':
          description: Synchronization summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  fetched:
                    type: integer
                  processed:
                    type: integer
  /api/email/inbound-messages:
    get:
      summary: List inbound email messages
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Paginated inbound messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailInboundMessageCollection'
  /api/email/inbound-messages/{email_inbound_message}:
    get:
      summary: View inbound email message
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/EmailInboundMessageId'
      responses:
        '200':
          description: Inbound email message detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailInboundMessageResponse'
  /api/email/outbound-messages:
    get:
      summary: List outbound email messages
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
      responses:
        '200':
          description: Paginated outbound messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailOutboundMessageCollection'
  /api/email/outbound-messages/{email_outbound_message}:
    get:
      summary: View outbound email message
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/EmailOutboundMessageId'
      responses:
        '200':
          description: Outbound email message detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailOutboundMessageResponse'
  /api/email/outbound-messages/{email_outbound_message}/deliver:
    post:
      summary: Deliver outbound email message
      tags: [Email Pipeline]
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/BrandHeader'
        - $ref: '#/components/parameters/EmailOutboundMessageId'
      responses:
        '200':
          description: Delivery result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailOutboundDeliveryResponse'
        '422':
          description: Delivery failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailOutboundDeliveryResponse'
  /api/health:
    get:
      summary: Service health snapshot
      tags: [Observability]
      parameters:
        - $ref: '#/components/parameters/MonitoringTokenHeader'
      responses:
        '200':
          description: Connectivity status for critical dependencies
          content:
            application/json:
              examples:
                healthy:
                  value:
                    database: true
                    redis: true
                    queue: true
                    scout: false
                    timestamp: '2024-01-01T12:00:00Z'
        '401':
          description: Missing or invalid monitoring token
        '403':
          description: Request IP not permitted
  /api/security/two-factor:
    post:
      summary: Enroll the current user in two-factor authentication
      tags: [Security]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Enrollment secret and recovery codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFactorEnrollmentResponse'
    delete:
      summary: Disable two-factor authentication
      tags: [Security]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Two-factor authentication disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/security/two-factor/confirm:
    post:
      summary: Confirm two-factor authentication
      tags: [Security]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFactorConfirmRequest'
      responses:
        '200':
          description: Two-factor authentication confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '422':
          description: Invalid verification code
  /api/security/ip-restrictions:
    patch:
      summary: Update per-user IP allow/block lists
      tags: [Security]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IpRestrictionRequest'
      responses:
        '200':
          description: IP restrictions updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: laravel_session
  parameters:
    TenantHeader:
      name: X-Tenant
      in: header
      required: true
      schema:
        type: integer
    ChannelTokenHeader:
      name: X-Channel-Token
      in: header
      required: true
      schema:
        type: string
      description: Shared secret for channel ingestion adapters.
    MonitoringTokenHeader:
      name: X-Monitoring-Token
      in: header
      required: true
      schema:
        type: string
      description: Hashable token whose SHA-256 value is stored in monitoring_tokens.
      description: Active tenant identifier.
    BrandHeader:
      name: X-Brand
      in: header
      required: true
      schema:
        type: integer
      description: Active brand identifier.
    TicketId:
      name: ticket
      in: path
      required: true
      schema:
        type: integer
    ChannelAdapterId:
      name: channel_adapter
      in: path
      required: true
      schema:
        type: integer
    TicketMacroId:
      name: ticket_macro
      in: path
      required: true
      schema:
        type: integer
    EmailMailboxId:
      name: mailbox
      in: path
      required: true
      schema:
        type: integer
    EmailInboundMessageId:
      name: email_inbound_message
      in: path
      required: true
      schema:
        type: integer
    EmailOutboundMessageId:
      name: email_outbound_message
      in: path
      required: true
      schema:
        type: integer
  schemas:
    TicketCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        links:
          type: object
        meta:
          type: object
    TicketResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Ticket'
    TicketMessageCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TicketMessage'
        links:
          type: object
        meta:
          type: object
    TicketMessageResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TicketMessage'
    EmailMailboxCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmailMailbox'
        links:
          type: object
        meta:
          type: object
    EmailMailboxResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EmailMailbox'
    EmailMailboxRequest:
      type: object
      required: [name, slug, direction, protocol, host, port, username, credentials]
      properties:
        name:
          type: string
        slug:
          type: string
        direction:
          type: string
          enum: [inbound, outbound, bidirectional]
        protocol:
          type: string
          enum: [imap, smtp]
        host:
          type: string
        port:
          type: integer
        encryption:
          type: string
          nullable: true
          enum: [ssl, tls, starttls, none]
        username:
          type: string
        credentials:
          type: object
          required: [password]
          properties:
            password:
              type: string
            client_secret:
              type: string
        settings:
          type: object
          additionalProperties: true
        brand_id:
          type: integer
          nullable: true
        is_active:
          type: boolean
    EmailMailbox:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        direction:
          type: string
        protocol:
          type: string
        host:
          type: string
        port:
          type: integer
        encryption:
          type: string
          nullable: true
        username_hash:
          type: string
          description: First 16 characters of the SHA-256 hash of the username.
        is_active:
          type: boolean
        brand_id:
          type: integer
          nullable: true
        last_synced_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    EmailInboundMessageCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmailInboundMessage'
        links:
          type: object
        meta:
          type: object
    EmailInboundMessageResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EmailInboundMessage'
    EmailInboundMessage:
      type: object
      properties:
        id:
          type: integer
        mailbox_id:
          type: integer
        ticket_id:
          type: integer
          nullable: true
        ticket_message_id:
          type: integer
          nullable: true
        subject:
          type: string
          nullable: true
        from_email:
          type: string
          format: email
        from_name:
          type: string
          nullable: true
        to_recipients:
          type: array
          items:
            type: string
            format: email
        cc_recipients:
          type: array
          items:
            type: string
            format: email
        bcc_recipients:
          type: array
          items:
            type: string
            format: email
        status:
          type: string
          enum: [pending, processed, failed]
        received_at:
          type: string
          format: date-time
        processed_at:
          type: string
          format: date-time
          nullable: true
        attachments_count:
          type: integer
        headers:
          type: object
          additionalProperties: true
        error_info:
          type: object
          nullable: true
          additionalProperties: true
        created_at:
          type: string
          format: date-time
    EmailOutboundMessageCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmailOutboundMessage'
        links:
          type: object
        meta:
          type: object
    EmailOutboundMessageResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EmailOutboundMessage'
    EmailOutboundMessage:
      type: object
      properties:
        id:
          type: integer
        mailbox_id:
          type: integer
          nullable: true
        ticket_id:
          type: integer
          nullable: true
        ticket_message_id:
          type: integer
          nullable: true
        subject:
          type: string
          nullable: true
        to_recipients:
          type: array
          items:
            type: string
            format: email
        cc_recipients:
          type: array
          items:
            type: string
            format: email
        bcc_recipients:
          type: array
          items:
            type: string
            format: email
        status:
          type: string
          enum: [queued, sending, sent, failed]
        attempts:
          type: integer
        provider_message_id:
          type: string
          nullable: true
        scheduled_at:
          type: string
          format: date-time
          nullable: true
        last_attempted_at:
          type: string
          format: date-time
          nullable: true
        sent_at:
          type: string
          format: date-time
          nullable: true
        last_error:
          type: object
          nullable: true
          additionalProperties: true
        created_at:
          type: string
          format: date-time
    EmailOutboundDeliveryResponse:
      type: object
      properties:
        status:
          type: string
          enum: [sent, failed]
        provider_message_id:
          type: string
          nullable: true
        error:
          type: object
          nullable: true
          additionalProperties: true
    TicketBulkActionRequest:
      type: object
      required: [ticket_ids, actions]
      properties:
        ticket_ids:
          type: array
          items:
            type: integer
        actions:
          type: array
          items:
            type: object
            required: [type]
            properties:
              type:
                type: string
                enum: [assign, status, sla]
              assignee_id:
                type: integer
              status:
                type: string
              resolution_due_at:
                type: string
                format: date-time
              first_response_due_at:
                type: string
                format: date-time
    TicketBulkActionResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            processed:
              type: integer
            skipped:
              type: integer
            errors:
              type: array
              items:
                type: object
                properties:
                  ticket_id:
                    type: integer
                  reason:
                    type: string
                  messages:
                    type: array
                    items:
                      type: string
    MessageResponse:
      type: object
      properties:
        message:
          type: string
      required: [message]
    TwoFactorEnrollmentResponse:
      type: object
      properties:
        secret:
          type: string
          description: Base32 encoded TOTP secret.
        otpauth_uri:
          type: string
          description: otpauth URI compatible with authenticator apps.
        recovery_codes:
          type: array
          items:
            type: string
      required: [secret, otpauth_uri, recovery_codes]
    TwoFactorConfirmRequest:
      type: object
      required: [code]
      properties:
        code:
          type: string
          pattern: '^\\d{6}$'
    IpRestrictionRequest:
      type: object
      properties:
        ip_allowlist:
          type: array
          items:
            type: string
            format: ipv4
        ip_blocklist:
          type: array
          items:
            type: string
            format: ipv4
    TicketMessage:
      type: object
      properties:
        id:
          type: integer
        ticket_id:
          type: integer
        visibility:
          type: string
        channel:
          type: string
        body:
          type: string
        metadata:
          type: object
          additionalProperties: true
        attachments_count:
          type: integer
        posted_at:
          type: string
          format: date-time
        author:
          type: object
          properties:
            type:
              type: string
            id:
              type: integer
        attachments:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              filename:
                type: string
              mime_type:
                type: string
              size:
                type: integer
              metadata:
                type: object
                additionalProperties: true
    TicketMessageRequest:
      type: object
      required: [body]
      properties:
        body:
          type: string
        visibility:
          type: string
          enum: [public, internal]
        channel:
          type: string
        author_type:
          type: string
          enum: [user, contact, system]
        author_id:
          type: integer
        external_id:
          type: string
        metadata:
          type: object
          additionalProperties: true
        posted_at:
          type: string
          format: date-time
        participants:
          type: array
          items:
            type: object
            properties:
              participant_type:
                type: string
                enum: [user, contact, system]
              participant_id:
                type: integer
              role:
                type: string
                enum: [requester, cc, agent, watcher]
              visibility:
                type: string
                enum: [internal, external]
              last_seen_at:
                type: string
                format: date-time
              last_typing_at:
                type: string
                format: date-time
              is_muted:
                type: boolean
              metadata:
                type: object
                additionalProperties: true
        attachments:
          type: array
          items:
            type: object
            properties:
              disk:
                type: string
              path:
                type: string
              filename:
                type: string
              mime_type:
                type: string
              size:
                type: integer
              metadata:
                type: object
                additionalProperties: true
        email:
          type: object
          description: Optional email delivery payload when channel is email.
          properties:
            subject:
              type: string
            mailbox_id:
              type: integer
            to:
              type: array
              minItems: 1
              items:
                type: string
                format: email
            cc:
              type: array
              items:
                type: string
                format: email
            bcc:
              type: array
              items:
                type: string
                format: email
            text_body:
              type: string
            html_body:
              type: string
    TicketRequest:
      type: object
      properties:
        brand_id:
          type: integer
        contact_id:
          type: integer
        company_id:
          type: integer
        subject:
          type: string
        description:
          type: string
        priority:
          type: string
          description: Priority slug available to the active tenant (e.g. normal, high).
        channel:
          type: string
          enum: [email, web, chat, phone]
        status:
          type: string
          description: Status slug available to the active tenant (e.g. open, pending).
        reference:
          type: string
        metadata:
          type: object
          additionalProperties: true
        assigned_to:
          type: integer
        watcher_ids:
          type: array
          items:
            type: integer
        category_ids:
          type: array
          items:
            type: integer
        tag_ids:
          type: array
          items:
            type: integer
      required: [subject, priority]
    Ticket:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
        contact_id:
          type: integer
        company_id:
          type: integer
        created_by:
          type: integer
        assigned_to:
          type: integer
        subject:
          type: string
        description:
          type: string
        status:
          type: string
        priority:
          type: string
        channel:
          type: string
        reference:
          type: string
        metadata:
          type: object
          additionalProperties: true
        status_definition:
          $ref: '#/components/schemas/TicketStatus'
        priority_definition:
          $ref: '#/components/schemas/TicketPriority'
        sla:
          $ref: '#/components/schemas/TicketSlaSnapshot'
        status_changed_at:
          type: string
          format: date-time
        first_response_due_at:
          type: string
          format: date-time
        resolution_due_at:
          type: string
          format: date-time
        first_responded_at:
          type: string
          format: date-time
        resolved_at:
          type: string
          format: date-time
        closed_at:
          type: string
          format: date-time
        archived_at:
          type: string
          format: date-time
        last_customer_reply_at:
          type: string
          format: date-time
        last_agent_reply_at:
          type: string
          format: date-time
        last_activity_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
        categories:
          type: array
          items:
            $ref: '#/components/schemas/TicketCategory'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TicketTag'
        watchers:
          type: array
          items:
            $ref: '#/components/schemas/TicketWatcher'
    TicketStatus:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        is_default:
          type: boolean
        first_response_minutes:
          type: integer
        resolution_minutes:
          type: integer
    TicketPriority:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        color:
          type: string
        is_default:
          type: boolean
        first_response_minutes:
          type: integer
        resolution_minutes:
          type: integer
    TicketWatcher:
      type: object
      properties:
        user_id:
          type: integer
        last_seen_at:
          type: string
          format: date-time
        is_muted:
          type: boolean
    ChannelAdapter:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        name:
          type: string
        slug:
          type: string
        channel:
          type: string
          enum: [email, web, chat, phone]
        provider:
          type: string
        configuration:
          type: object
          additionalProperties: true
        metadata:
          type: object
          additionalProperties: true
        is_active:
          type: boolean
        last_synced_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ChannelAdapterRequest:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        channel:
          type: string
          enum: [email, web, chat, phone]
        provider:
          type: string
        brand_id:
          type: integer
          nullable: true
        configuration:
          type: object
          additionalProperties: true
        metadata:
          type: object
          additionalProperties: true
        is_active:
          type: boolean
        last_synced_at:
          type: string
          format: date-time
          nullable: true
      required: [name, slug, channel, provider]
    ChannelAdapterCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChannelAdapter'
        links:
          type: object
        meta:
          type: object
    ChannelAdapterResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ChannelAdapter'
    TicketMacro:
      type: object
      properties:
        id:
          type: integer
        tenant_id:
          type: integer
        brand_id:
          type: integer
          nullable: true
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        body:
          type: string
        visibility:
          type: string
          enum: [tenant, brand, private]
        metadata:
          type: object
          additionalProperties: true
        is_shared:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TicketMacroRequest:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        body:
          type: string
        visibility:
          type: string
          enum: [tenant, brand, private]
        brand_id:
          type: integer
          nullable: true
        metadata:
          type: object
          additionalProperties: true
        is_shared:
          type: boolean
      required: [name, slug, body, visibility]
    TicketMacroCollection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TicketMacro'
        links:
          type: object
        meta:
          type: object
    TicketMacroResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TicketMacro'
    TicketSlaSnapshot:
      type: object
      properties:
        first_response:
          $ref: '#/components/schemas/TicketSlaMetric'
        resolution:
          $ref: '#/components/schemas/TicketSlaMetric'
    TicketSlaMetric:
      type: object
      properties:
        state:
          type: string
          enum: [pending, breached, met]
        due_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        breached_at:
          type: string
          format: date-time
    TicketCategory:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        color:
          type: string
        is_default:
          type: boolean
    TicketTag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        color:
          type: string
